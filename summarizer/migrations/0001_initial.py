# Generated by Django 5.2.5 on 2025-08-16 11:08

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Summary',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title of the summary', max_length=255)),
                ('summary_type', models.CharField(choices=[('meeting', 'Meeting Notes'), ('call', 'Call Transcript'), ('document', 'Document'), ('other', 'Other')], default='meeting', max_length=20)),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('processing', 'Processing'), ('completed', 'Completed'), ('error', 'Error')], default='draft', max_length=20)),
                ('original_text', models.TextField(help_text='Original uploaded text/transcript')),
                ('custom_prompt', models.TextField(help_text='Custom instruction/prompt for AI processing')),
                ('ai_generated_summary', models.TextField(blank=True, help_text='AI-generated summary', null=True)),
                ('edited_summary', models.TextField(blank=True, help_text='User-edited version of the summary', null=True)),
                ('word_count_original', models.PositiveIntegerField(default=0, help_text='Word count of original text')),
                ('word_count_summary', models.PositiveIntegerField(default=0, help_text='Word count of final summary')),
                ('processing_time', models.FloatField(blank=True, help_text='Time taken for AI processing in seconds', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When AI processing was completed', null=True)),
                ('is_shared', models.BooleanField(default=False, help_text='Whether this summary has been shared')),
                ('shared_at', models.DateTimeField(blank=True, help_text='When the summary was last shared', null=True)),
                ('shared_with_emails', models.TextField(blank=True, help_text='Comma-separated list of emails shared with', null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='summaries', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Summary',
                'verbose_name_plural': 'Summaries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SharedSummaryLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recipient_emails', models.TextField(help_text='Comma-separated list of recipient emails')),
                ('subject', models.CharField(help_text='Email subject line', max_length=255)),
                ('message_body', models.TextField(blank=True, help_text='Additional message body', null=True)),
                ('shared_at', models.DateTimeField(auto_now_add=True)),
                ('success', models.BooleanField(default=True, help_text='Whether the email was sent successfully')),
                ('error_message', models.TextField(blank=True, help_text='Error message if email failed', null=True)),
                ('summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='share_logs', to='summarizer.summary')),
            ],
            options={
                'verbose_name': 'Shared Summary Log',
                'verbose_name_plural': 'Shared Summary Logs',
                'ordering': ['-shared_at'],
            },
        ),
        migrations.CreateModel(
            name='AIProcessingLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('prompt_used', models.TextField(help_text='The full prompt sent to AI')),
                ('response_received', models.TextField(blank=True, help_text='Raw AI response', null=True)),
                ('processing_time', models.FloatField(help_text='Processing time in seconds')),
                ('tokens_used', models.PositiveIntegerField(blank=True, help_text='Number of tokens used', null=True)),
                ('success', models.BooleanField(default=True)),
                ('error_message', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('summary', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='processing_logs', to='summarizer.summary')),
            ],
            options={
                'verbose_name': 'AI Processing Log',
                'verbose_name_plural': 'AI Processing Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('groq_api_key', models.CharField(blank=True, help_text="User's Groq API key for AI processing", max_length=255, null=True)),
                ('default_email_signature', models.TextField(blank=True, help_text='Default signature for email sharing', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
    ]
